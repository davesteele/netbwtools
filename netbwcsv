#!/usr/bin/python3

import argparse
import subprocess
import sys
import re
import time
from datetime import datetime
from datetime import timedelta
from collections import namedtuple

PointParam = namedtuple('PointParam',
                        ['device', 'ip', 'community', 'direction', 'version'])


class MonPoint(object):
    """Define a network monitoring point"""

    def __init__(self, name, params):
        """Expected params are ip, direction, community, device"""

        self.name = name
        self.params = params
        self.oid = None

    def __getattr__(self, name):
        return self.params.__getattribute__(name)

    def devname(self, title):
        if title:
            return '"' + title + '"'
        else:
            return ':'.join([self.ip, self.device, self.direction])

    def snmpwalk(self, oid):
        cmd = "snmpwalk -v {3} -c {2} {0} {1}".format(self.ip,
                                                      oid,
                                                      self.community,
                                                      self.version)

        try:
            output = subprocess.check_output(cmd.split()).decode()
        except subprocess.CalledProcessError:
            print(u"Error calling snmpwalk")
            sys.exit(1)

        return output

    def _devtuple(self, line):
        """Convert snmpwalk ifDescr line to e.g. ('eth0', '4')"""

        tokens = line.split()
        if tokens:
            return((tokens[-1], tokens[0].split('.')[-1]))
        else:
            return None

    def _devmap(self):
        """Create dict mapping from network device to IF-MIB index"""

        lines = self.snmpwalk(u'.1.3.6.1.2.1.2.2.1.2').splitlines()
        return dict(y for y in [self._devtuple(x) for x in lines] if y)

    def _devid(self):
        if re.search('^[0-9]+$', self.device):
            return self.device
        else:
            try:
                return self._devmap()[self.device]
            except AttributeError:
                print(u'Device {0} not found'.format(self.device))
                sys.exit(1)

    def _get_oid(self):
        """Determine the OID for the in/outOctets"""

        if self.oid is None:
            if self.direction == 'in':
                dirnum = u'10'
            else:
                dirnum = u'16'

            mibbase = u'.1.3.6.1.2.1.2.2.1'
            self.oid = u'%s.%s.%s' % (mibbase, dirnum, self._devid())

        return self.oid

    def get_reading(self):
        return int(self.snmpwalk(self._get_oid()).split()[-1])


def parse_monpoint(arg):
    vals = arg.split(':')
    ipaddr = vals[0]

    if len(vals) > 1:
        dev = vals[1]
    else:
        dev = 'eth0'

    if len(vals) > 2:
        community = vals[2]
    else:
        community = 'public'

    if len(vals) > 3:
        direction = vals[3]
    else:
        direction = 'in'

    return PointParam(dev, ipaddr, community, direction, 1)


def parse_args():
    parser = argparse.ArgumentParser(
        description="Monitor traffic at network endpoints",
        epilog="Query the device using SNMP, and output the results "
               "in CSV format."
               "\n"
               "The device may be specified by name or by SNMP index "
               "(the last digit in the monitoring OID)."
    )

    parser.add_argument(
        'monpoints',
        help="Monitoring point. "
             "Device defaults to 'eth0'. "
             "The SNMP community defaults to 'public'. "
             "Direction is 'in' or 'out' (default 'in')",
        metavar="ipaddr[:device[:community[:direction]]]",
        default='',
        nargs='+',
    )

    parser.add_argument(
        '-b', '--bps',
        help="output the rate in bits/second (default is bytes/sec)",
        default=False,
        action='store_true',
        required=False,
    )

    parser.add_argument(
        '-d', '--delay',
        help="delay between samples (default is 5 seconds)",
        metavar="SEC",
        default=5,
        type=int,
        required=False,
    )

    parser.add_argument(
        '-l', '--list-devices',
        help="just list the devices on the node, and exit",
        action='store_true',
        default=False,
        required=False,
    )

    parser.add_argument(
        '-t', '--title',
        help="title for the csv data column",
        metavar="TITLE",
        default="",
        type=str,
        required=False,
    )

    args = parser.parse_args()

    return args


if __name__ == '__main__':

    args = parse_args()

    monpoints = [MonPoint(x, parse_monpoint(x)) for x in args.monpoints]

    if args.list_devices:
        for point in monpoints:
            print(point.name, ':', [x for x in point._devmap()])
        sys.exit(0)

    hdrline = ', '.join(['time'] + [m.devname(args.title) for m in monpoints])
    print(hdrline)

    checktime = datetime.now() + timedelta(seconds=args.delay)
    last = [x.get_reading() for x in monpoints]

    while True:
        try:
            delay = (checktime - datetime.now()).total_seconds()
            if delay > 0:
                time.sleep(delay)

            results = [x.get_reading() for x in monpoints]

            rates = [int((x[0]-x[1])/(1.0 * args.delay))
                     for x in zip(results, last)]
            if args.bps:
                rates = [x*8 for x in rates]

            csvline = checktime.strftime("%Y-%m-%d %H:%M:%S")
            csvline += ", "
            csvline += ", ".join(["{0}".format(x) for x in rates])
            print(csvline)
            sys.stdout.flush()

            last = results

            checktime += timedelta(seconds=args.delay)
        except KeyboardInterrupt:
            sys.exit(0)
